---
- name: Create Scheduled Task
  ansible.windows.win_shell: |
    $Action = New-ScheduledTaskAction -Execute "cmd.exe" -Argument "/c powershell.exe -File C:\temp\{{ script }} > c:\temp\{{ script }}_output.txt 2>c:\temp\{{ script }}_err_output.txt"
    $Trigger = Get-CimClass "MSFT_TaskRegistrationTrigger" -Namespace "Root/Microsoft/Windows/TaskScheduler"
    $Task = New-ScheduledTask -Action $Action -Trigger $Trigger
    Register-ScheduledTask -User "SYSTEM" -TaskName "{{ script }}" -InputObject $Task

- name: Get Scheduled Task status
  ansible.windows.win_shell:
    (Get-ScheduledTask -TaskName "{{ script }}").State
  register: task_status
  until: task_status.stdout is not search("Running")
  retries: 9999
  delay: 1
  changed_when: false

- name: Get exitcode from Scheduled Task
  ansible.windows.win_shell:
    (Get-ScheduledTaskInfo -TaskName "{{ script }}").LastTaskResult
  register: schtaskresult
  changed_when: false

- name: Delete Scheduled Task
  ansible.windows.win_shell:
    Unregister-ScheduledTask -TaskName "{{ script }}" -Confirm:$False

- name: Output handling
  block:
    - name: Read std output
      ansible.builtin.slurp:
        src: c:\temp\{{ script }}_output.txt
      register: output_stdout_encoded

    - name: Set fact with std output
      ansible.builtin.set_fact:
        output_stdout: "{{ output_stdout_encoded.content | b64decode }}"

    - name: Read std error output
      ansible.builtin.slurp:
        src: c:\temp\{{ script }}_err_output.txt
      register: output_stderr_encoded

    - name: Set fact with err output
      ansible.builtin.set_fact:
        output_stderr: "{{ output_stderr_encoded.content | b64decode }}"

    - name: Create dictionary for output
      ansible.builtin.set_fact:
        output: "{{ output | default({}) | combine({item.key: item.value}) }}"
      loop: "{{ tag_data | dict2items }}"
      vars:
        tag_data:
          stdout: "{{ output_stdout }}"
          stderr: "{{ output_stderr }}"
          rc: "{{ schtaskresult.stdout }}"

    - debug: var=output.stdout
    - debug: var=output.stderr
    - debug: var=output.rc

    - name: Clean up created files
      ansible.windows.win_file:
        path: "{{ item }}"
        state: absent
      loop:
        - c:\temp\{{ script }}_output.txt
        - c:\temp\{{ script }}_err_output.txt
  ignore_errors: true
